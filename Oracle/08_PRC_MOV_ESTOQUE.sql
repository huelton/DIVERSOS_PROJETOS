-- CRIANDO PROCEDURE PARA ALIMENTAR ESTOQUE
-- REGRAS
/*
VERIFICAR SE A OPERACAO E PERMITIDA (E - ENTRADA e S - SAIDA)
VERIFICA SE O MATERIAL EXISTE
 -- VERIFICACOES DE SAIDA
 1 - VERIFICAR SE MATERIAL TEM SALDO ESTOQUE E QTD E MENOR QUE SALDO
 2 - VERIFICAR SE MATERIAL TEM SALDO ESTOQUE_LOTE E QTD SAIDA E MENOR QUE SALDO DO LOTE
 -- VERIFICAOES ENTRADA
 1 - SE MATERIAL EXISTE UPDATE
 2 - SENAO EXISTE INSERT
 TABELAS ENVOLVIDAS
 ESTOQUE
 ESTOQUE_LOTE
 ESTOQUE_MOV
 -- EXCESSOES E ROLLBACK
 */

 ALTER SESSION SET nls_date_format = 'DD/MM/YYYY';

 CREATE OR REPLACE PROCEDURE PRC_MOV_ESTOQUE (P_OPER IN VARCHAR2,
 	P_EMP IN NUMBER,
 	P_COD_MAT IN INT,
 	P_LOTE IN VARCHAR2,
 	P_QTD IN INT,
 	P_DATA_MOV DATE)
 IS

 EXC_MAT_N_EXISTE EXCEPTION;
 EXC_OPERACAO_NAO_PERMITIDA EXCEPTION;
 EXC_ESTOQUE_NEGATIVO EXCEPTION;
 EXC_ESTOQUE_NEGATIVO_LOTE EXCEPTION;

 V_SALDO_ESTOQUE INT;
 V_SALDO_ESTOQUE_LOTE INT;
 V_MAT_EXISTE INT;
 V_REG_ESTOQUE INT;
 V_REG_ESTOQUE_LOTE INT;

 BEGIN
 
 IF P_OPER NOT IN ('E','S') THEN

 RAISE EXC_OPERACAO_NAO_PERMITIDA;
 ELSE 
 DBMS_OUTPUT.PUT_LINE ('OPERACAO OK! CONTINUA');   
 END IF;

 -- VERIFICANDO SE O MATERIAL EXISTE
 SELECT COUNT(*) 
 INTO V_MAT_EXISTE 
 FROM MATERIAL
 WHERE COD_MAT = P_COD_MAT 
 AND COD_EMPRESA = P_EMP;

 IF V_MAT_EXISTE = 0 THEN
 
 RAISE EXC_MAT_N_EXISTE;
 ELSE
 DBMS_OUTPUT.PUT_LINE ('CONTEM MATERIAL, OK! CONTINUA'); 
 END IF;

  -- VERIFICANDO SE CONTEM O MATERIAL NO ESTOQUE
  SELECT COUNT(*)
  INTO V_REG_ESTOQUE
  FROM ESTOQUE
  WHERE COD_MAT = P_COD_MAT 
  AND COD_EMPRESA = P_EMP; 

  DBMS_OUTPUT.PUT_LINE ('QTD REG ESTOQUE: ' || V_REG_ESTOQUE); 
  
 -- VERIFICANDO OPERACAO DE SAIDA SE MATERIAL EXISTE NO ESTOQUE
 IF P_OPER = 'S' AND V_REG_ESTOQUE = 0 THEN
 RAISE EXC_ESTOQUE_NEGATIVO;
 ELSIF P_OPER = 'S' AND V_REG_ESTOQUE > 0 THEN
          -- ATRIBUINDO SALDO DE ESTOQUE E QTD REGISTRO
          SELECT QTD_SALDO, COUNT(*)
          INTO V_SALDO_ESTOQUE, V_REG_ESTOQUE
          FROM ESTOQUE
          WHERE COD_MAT = P_COD_MAT 
          AND COD_EMPRESA = P_EMP
          GROUP BY QTD_SALDO;
          
          DBMS_OUTPUT.PUT_LINE ('TEM ESTOQUE'); 
          
          END IF;

          SELECT COUNT(*)
          INTO V_REG_ESTOQUE_LOTE
          FROM ESTOQUE_LOTE
          WHERE COD_MAT = P_COD_MAT
          AND LOTE = P_LOTE 
          AND COD_EMPRESA = P_EMP;        

          DBMS_OUTPUT.PUT_LINE ('QTD REG ESTOQUE LOTE: ' || V_REG_ESTOQUE_LOTE); 
          
          IF P_OPER = 'S' AND V_REG_ESTOQUE_LOTE = 0 THEN

          RAISE EXC_ESTOQUE_NEGATIVO_LOTE;
          
          ELSIF P_OPER = 'S' AND V_REG_ESTOQUE_LOTE > 0 THEN

        -- ATRIBUINDO SALDO DE ESTOQUE_LOTE E QTD_REGISTRO
        SELECT SUM(QTD_LOTE), COUNT(*)
        INTO V_SALDO_ESTOQUE_LOTE, V_REG_ESTOQUE_LOTE
        FROM ESTOQUE_LOTE
        WHERE COD_MAT = P_COD_MAT
        AND LOTE = P_LOTE 
        AND COD_EMPRESA = P_EMP;   
        
        DBMS_OUTPUT.PUT_LINE ('TEM ESTOQUE LOTE'); 

        END IF;

        IF P_OPER = 'S' AND ( V_SALDO_ESTOQUE_LOTE - P_QTD < 0
        	OR V_SALDO_ESTOQUE - P_QTD < 0 ) THEN

        RAISE EXC_ESTOQUE_NEGATIVO_LOTE;

        ELSIF P_OPER = 'S' AND V_SALDO_ESTOQUE_LOTE - P_QTD >= 0
        AND V_SALDO_ESTOQUE - P_QTD >= 0 THEN

         -- ATUALIZA ESTOQUE
         UPDATE ESTOQUE 
         SET QTD_SALDO = QTD_SALDO - P_QTD
         WHERE COD_MAT = P_COD_MAT
         AND COD_EMPRESA = P_EMP; 


         -- ATUALIZA ESTOQUE_LOTE
         UPDATE ESTOQUE_LOTE
         SET QTD_LOTE = QTD_LOTE - P_QTD
         WHERE COD_MAT = P_COD_MAT
         AND LOTE = P_LOTE
         AND COD_EMPRESA = P_EMP; 
         
         -- INSERE ESTOQUE TIP_MOV
         INSERT INTO ESTOQUE_MOV(ID_MOV, COD_EMPRESA, TIP_MOV, 
         	COD_MAT, LOTE, QTD, 
         	LOGIN, DATA_HORA, DATA_MOV)
         VALUES (NULL, P_EMP, P_OPER, P_COD_MAT, 
         	P_LOTE, P_QTD, USER, SYSDATE, P_DATA_MOV);
         COMMIT;
         DBMS_OUTPUT.PUT_LINE ('OPERACAO DE SAIDA FINALIZADA'); 
         END IF;
            -- FINALIZA OPERACAO PARA SAIDA

     -- INICIA OPERACAO DE ENTRADA

     -- VERIFICANDO SE MATERIAL TEM REGISTRO NA ESTOQUE E ESTOQUE LOTE
     IF P_OPER = 'E' AND V_REG_ESTOQUE_LOTE > 0 AND V_REG_ESTOQUE > 0 THEN
     
        -- ATUALIZANDO ESTOQUE
        UPDATE ESTOQUE 
        SET QTD_SALDO = QTD_SALDO + P_QTD 
        WHERE COD_MAT = P_COD_MAT
        AND COD_EMPRESA = P_EMP; 

        -- ATUALIZANDO ESTOQUE_LOTE
        UPDATE ESTOQUE_LOTE
        SET QTD_LOTE = QTD_LOTE + P_QTD 
        WHERE COD_MAT = P_COD_MAT
        AND LOTE = P_LOTE
        AND COD_EMPRESA = P_EMP; 

         -- INSERE ESTOQUE TIP_MOV
         INSERT INTO ESTOQUE_MOV(ID_MOV, COD_EMPRESA, TIP_MOV, 
         	COD_MAT, LOTE, QTD, 
         	LOGIN, DATA_HORA, DATA_MOV)
         VALUES (NULL, P_EMP, P_OPER, P_COD_MAT, 
         	P_LOTE, P_QTD, USER, SYSDATE, P_DATA_MOV);
         COMMIT;
         DBMS_OUTPUT.PUT_LINE ('OPERACAO DE ENTRADA (ATUALIZANDO) FINALIZADA'); 
         
      -- VERIFICA QUE EXISTE ESTOQUE MAS NAO EXISTE ESTOQUE LOTE PARA INSERT ESTOQUE LOTE E UPDATE ESTOQUE
      ELSIF P_OPER = 'E' AND V_REG_ESTOQUE_LOTE = 0 AND V_REG_ESTOQUE > 0 THEN
      
            -- ATUALIZANDO ESTOQUE
            UPDATE ESTOQUE
            SET QTD_SALDO = QTD_SALDO + P_QTD 
            WHERE COD_MAT = P_COD_MAT
            AND COD_EMPRESA = P_EMP;              

            -- INSERINDO REGISTRO NO ESTOQUE_LOTE
            INSERT INTO ESTOQUE_LOTE(COD_EMPRESA,COD_MAT, QTD_LOTE, LOTE)
            VALUES (P_EMP, P_COD_MAT, P_QTD, P_LOTE);
            
            -- INSERE ESTOQUE TIP_MOV
            INSERT INTO ESTOQUE_MOV(ID_MOV, COD_EMPRESA, TIP_MOV, 
            	COD_MAT, LOTE, QTD, 
            	LOGIN, DATA_HORA, DATA_MOV)
            VALUES (NULL, P_EMP, P_OPER, P_COD_MAT, 
            	P_LOTE, P_QTD, USER, SYSDATE, P_DATA_MOV);
            COMMIT;
            DBMS_OUTPUT.PUT_LINE ('OPERACAO DE ENTRADA (ESTOQUE_LOTE) FINALIZADA'); 
            
      -- VERIFICA QUE NAO EXISTE ESTOQUE E NAO EXISTE ESTOQUE LOTE PARA INSERT EM AMBAS
      ELSIF P_OPER = 'E' AND V_REG_ESTOQUE_LOTE = 0 AND V_REG_ESTOQUE = 0 THEN
      
            -- ATUALIZANDO ESTOQUE
            INSERT INTO ESTOQUE (COD_EMPRESA,COD_MAT, QTD_SALDO)
            VALUES (P_EMP, P_COD_MAT, P_QTD);             

            -- INSERINDO REGISTRO NO ESTOQUE_LOTE
            INSERT INTO ESTOQUE_LOTE(COD_EMPRESA,COD_MAT, QTD_LOTE, LOTE)
            VALUES (P_EMP, P_COD_MAT, P_QTD, P_LOTE);
            
            -- INSERE ESTOQUE TIP_MOV
            INSERT INTO ESTOQUE_MOV(ID_MOV, COD_EMPRESA, TIP_MOV, 
            	COD_MAT, LOTE, QTD, 
            	LOGIN, DATA_HORA, DATA_MOV)
            VALUES (NULL, P_EMP, P_OPER, P_COD_MAT, 
            	P_LOTE, P_QTD, USER, SYSDATE, P_DATA_MOV);

            COMMIT;
            DBMS_OUTPUT.PUT_LINE ('OPERACAO DE ENTRADA (NOVO) FINALIZADA');
            END IF;
            -- TERMINA ENTRADA

      -- INICIA EXCESSOES
      EXCEPTION
      WHEN EXC_OPERACAO_NAO_PERMITIDA THEN
      DBMS_OUTPUT.PUT_LINE ('A OPERACAO DEVE SER E-ENTRADA OU S-SAIDA');
      ROLLBACK;

      WHEN EXC_MAT_N_EXISTE THEN
      DBMS_OUTPUT.PUT_LINE ('MATERIAL NAO EXISTE NO CADASTRO');
      ROLLBACK;

      WHEN EXC_ESTOQUE_NEGATIVO THEN
      DBMS_OUTPUT.PUT_LINE ('ESTOQUE NEGATIVO, OPERACAO NAO PERMITIDA');
      ROLLBACK;

      WHEN EXC_ESTOQUE_NEGATIVO_LOTE THEN
      DBMS_OUTPUT.PUT_LINE ('ESTOQUE LOTE NEGATIVO, OPERACAO NAO PERMITIDA');
      ROLLBACK;
      
      WHEN NO_DATA_FOUND THEN
      DBMS_OUTPUT.PUT_LINE ('REGISTRO NAO ENCONTRADO!');
      DBMS_OUTPUT.PUT_LINE ('LINHA: ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
      ROLLBACK;

      WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE ('OCORREU UM ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
      DBMS_OUTPUT.PUT_LINE ('LINHA: ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
      ROLLBACK;
      
END PRC_MOV_ESTOQUE; -- FIM DA PROCEDURE

-- PARAMETRO OPERACAO, COD_EMPRESA, MATERIAL, LOTE, QTD
EXECUTE PRC_MOV_ESTOQUE('S', 1, 1,'ABC', 10, '01/01/2018');

SELECT * FROM ESTOQUE;
SELECT * FROM ESTOQUE_LOTE;
SELECT EM.*, TO_CHAR(EM.DATA_HORA,'DD/MM/YYYY HH24:MI:SS')DATA
FROM ESTOQUE_MOV EM;

DELETE ESTOQUE;
